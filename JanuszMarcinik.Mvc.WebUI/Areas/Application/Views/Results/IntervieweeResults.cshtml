@using JanuszMarcinik.Mvc.WebUI.Areas.Application.Models.Results
@model IntervieweeResultsViewModel

@{
    ViewBag.Title = "Wyniki dla wybranych filtrów";
}

<h2 class="center-block">
    <span class="label label-primary center-block">Wyniki dla wybranych filtrów</span>
</h2>

@using (var panel = Html.Bootstrap().Begin(new Panel()))
{
    using (panel.BeginBody())
    {
        <div class="row">
            <div class="col-sm-3">
                @Html.Bootstrap().FormGroup().TextBoxFor(x => x.Sex).PrependIcon(FontAwesome.venus_mars).Readonly()
                @Html.Bootstrap().FormGroup().TextBoxFor(x => x.Age).PrependIcon(FontAwesome.user_circle).Readonly()
            </div>
            <div class="col-sm-3">
                @Html.Bootstrap().FormGroup().TextBoxFor(x => x.Seniority).PrependIcon(FontAwesome.user_md).Readonly()
                @Html.Bootstrap().FormGroup().TextBoxFor(x => x.MaterialStatus).PrependIcon(FontAwesome.money).Readonly()
            </div>
            <div class="col-sm-3">
                @Html.Bootstrap().FormGroup().TextBoxFor(x => x.PlaceOfResidence).PrependIcon(FontAwesome.building).Readonly()
                @Html.Bootstrap().FormGroup().TextBoxFor(x => x.Education).PrependIcon(FontAwesome.graduation_cap).Readonly()
            </div>
            <div class="col-sm-3">
                @Html.Bootstrap().FormGroup().TextBoxFor(x => x.MartialStatus).PrependIcon(FontAwesome.users).Readonly()
                @Html.Bootstrap().FormGroup().TextBoxFor(x => x.Workplace).PrependIcon(FontAwesome.briefcase).Readonly()
            </div>
        </div>
    }
}

<table class="table table-condensed table-bordered table-hover table-responsive">
    <thead>
        <tr class="bg-info">
            <th colspan="7" class="text-center">Legenda</th>
        </tr>
        <tr class="bg-info">
            <th class="text-center">N</th>
            <th class="text-center">Śr</th>
            <th class="text-center">Mod</th>
            <th class="text-center">Me</th>
            <th class="text-center">Min</th>
            <th class="text-center">Max</th>
            <th class="text-center">S</th>
        </tr>
    </thead>

    <tbody class="text-center">
        <tr>
            <td>Ilość wyników</td>
            <td>Średnia</td>
            <td>Modalna</td>
            <td>Mediana</td>
            <td>Minimalna</td>
            <td>Maksymalna</td>
            <td>Odchylenie standardowe</td>
        </tr>
    </tbody>
</table>

@foreach (var result in Model.IntervieweeQuestionnaireResults)
{
    <table class="table table-condensed table-bordered table-hover table-responsive">
        <thead>
            <tr class="bg-info">
                <th>
                    @(Html.Bootstrap().ActionLinkButton("Szczegóły", MVC.Application.Results.IntervieweeDetails(
                        result.QuestionnaireId, Model.AgeId, Model.SexId, Model.EducationId, Model.MartialStatusId, Model.MaterialStatusId, Model.PlaceOfResidenceId, Model.SeniorityId, Model.WorkplaceId))
                        .PrependIcon(FontAwesome.info).Class("center-block"))
                </th>
                <th colspan="8" class="text-center">@result.QuestionnaireName</th>
            </tr>
            <tr class="bg-info">
                <th class="text-center">Kategoria pytań</th>
                <th class="text-center">Przedział dla wyników</th>
                <th class="text-center">N</th>
                <th class="text-center">Śr</th>
                <th class="text-center">Mod</th>
                <th class="text-center">Me</th>
                <th class="text-center">Min</th>
                <th class="text-center">Max</th>
                <th class="text-center">S</th>
            </tr>
        </thead>

        <tbody class="text-center">
            @foreach (var category in result.IntervieweeResults)
            {
                <tr>
                    <td>@category.CategoryName</td>
                    <td>@category.ResultRange</td>
                    <td>@category.Count</td>
                    <td>@category.Average</td>
                    <td>@category.Mode</td>
                    <td>@category.Median</td>
                    <td>@category.Minimum</td>
                    <td>@category.Maximum</td>
                    <td>@category.Deviation</td>
                </tr>
            }
        </tbody>
    </table>
}

<table class="table table-condensed table-bordered table-hover table-responsive">
    <thead>
        <tr class="bg-info">
            <th colspan="4" class="text-center">Korelacja liniowa Pearsona</th>
        </tr>
        <tr class="bg-info">
            <th class="text-center">Ankieta A</th>
            <th class="text-center">Ankieta B</th>
            <th class="text-center">Współczynnik korelacji</th>
            <th class="text-center">Wykres</th>
        </tr>
    </thead>

    <tbody class="text-center">
        @foreach (var correlation in Model.PearsonCorrelations)
        {
            <tr>
                <td>@correlation.XAxisName</td>
                <td>@correlation.YAxisName</td>
                <td>@correlation.Value.ToString("N2")</td>
                <td>
                    @(Html.Bootstrap().Button().Text("").PrependIcon(FontAwesome.line_chart).Style(ButtonStyle.Primary).TriggerModal("modalId")
                        .Data(new { @title = Json.Encode(correlation.Title) })
                        .Data(new { @xAxisName = correlation.XAxisName })
                        .Data(new { @yAxisName = correlation.YAxisName })
                        .Data(new { @seriesData = Json.Encode(correlation.ValuesCoordinates) })
                        .Data(new { @lineCoordinates = Json.Encode(correlation.RegressionLineCoordinates) })
                        .Data(new { @xAxisMin = Json.Encode(correlation.XAxisMin) })
                        .Data(new { @xAxisMax = Json.Encode(correlation.XAxisMax) })
                        .Data(new { @yAxisMin = Json.Encode(correlation.YAxisMin) })
                        .Data(new { @yAxisMax = Json.Encode(correlation.YAxisMax) })
                        .Data(new { @type = "chart-btn" }))
                </td>
            </tr>
        }
    </tbody>
</table>


@using (var modal = Html.Bootstrap().Begin(new Modal().Size(ModalSize.Large).Closeable().Id("modalId")))
{
    using (modal.BeginBody())
    {
        <div id="chart-container"></div>
    }
}

<script type="text/javascript">

    $("button[data-type='chart-btn']").click(function () {

        var title = $(this).attr('data-title');
        var xAxisName = $(this).attr('data-xAxisName');
        var yAxisName = $(this).attr('data-yAxisName');
        var seriesData = JSON.parse($(this).attr('data-seriesData'));
        var lineCoordinates = JSON.parse($(this).attr('data-lineCoordinates'));
        var xAxisMin = parseInt($(this).attr('data-xAxisMin'));
        var xAxisMax = parseInt($(this).attr('data-xAxisMax'));
        var yAxisMin = parseInt($(this).attr('data-yAxisMin'));
        var yAxisMax = parseInt($(this).attr('data-yAxisMax'));

        InitializeChart(title, xAxisName, yAxisName, seriesData, lineCoordinates, xAxisMin, xAxisMax, yAxisMin, yAxisMax);
    });

    function InitializeChart(title, xAxisName, yAxisName, seriesData, lineCoordinates, xAxisMin, xAxisMax, yAxisMin, yAxisMax) {

        Highcharts.chart('chart-container', {
            xAxis: {
                min: xAxisMin,
                max: xAxisMax,
                allowDecimals: false,
                startOnTick: false,
                tickInterval: 1,
                title: {
                    text: xAxisName
                }
            },
            yAxis: {
                min: yAxisMin,
                max: yAxisMax,
                allowDecimals: false,
                startOnTick: false,
                tickInterval: 1,
                title: {
                    text: yAxisName
                }
            },
            title: {
                text: title,
            },
            series: [
            {
                type: 'line',
                data: lineCoordinates,
                color: "#393939",
                lineWidth: 2,
                name: "Funkcja regresji",
                marker: {
                    enabled: false
                },
                enableMouseTracking: false
            },
            {
                type: 'scatter',
                data: seriesData,
                name: "Rezultaty",
                marker: {
                    radius: 4,
                    fillColor: "#3173ad"
                }
            }]
        });

    }
</script>

<br /><br />
@Html.ButtonsFooter(
    Html.Bootstrap().BackButton(MVC.Admin.Interviewees.List()))